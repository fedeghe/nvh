#!/bin/sh
#
# Author: fedeghe <fedeghe@gmail.com>
# Version : maltaV('PACKAGE.version$')
#

version=1.1.2
echo ""
echo "                  888"     
echo "888 8e  Y8b Y888P 888 ee  "
echo "888 88b  Y8b Y8P  888 88b "
echo "888 888   Y8b Y   888 888 "
echo "888 888    Y8P    888 888 "
echo "                          v $version"
echo ""





# allow only root
#
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi


mkdir -p /etc/apache2/vhosts
mkdir -p /etc/apache2/sslvhosts


cat > /etc/apache2/vhosts/conf.tpl << EOF
<VirtualHost *:80>
    ServerAdmin fedeghe@gmail.com
    DocumentRoot "%FOLDER%"
    ServerName %DOMAIN%
    ServerAlias www.%DOMAIN%
    Header set Access-Control-Allow-Origin "*"
    ErrorLog "/private/var/log/apache2/%DOMAIN%-error_log"
    CustomLog "/private/var/log/apache2/%DOMAIN%-access_log" common
    <Directory "%FOLDER%">
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>
EOF

cat > /etc/apache2/sslvhosts/conf.tpl << EOF
<VirtualHost *:443>
    ServerAdmin fedeghe@gmail.com
    DocumentRoot "%FOLDER%"
    ServerName %DOMAIN%
    ServerAlias www.%DOMAIN%
    Header set Access-Control-Allow-Origin "*"
    ErrorLog "/private/var/log/apache2/%DOMAIN%-error_log"
    CustomLog "/private/var/log/apache2/%DOMAIN%-access_log" common
    <Directory "%FOLDER%">
        AllowOverride All
        Require all granted
    </Directory>
    SSLEngine on
    SSLCertificateFile "%DOMAIN_CRT%"
    SSLCertificateKeyFile "%DOMAIN_KEY%"
</VirtualHost>
EOF

cat > /etc/apache2/htaccess.tpl << EOF
# pass the default character set
AddDefaultCharset utf-8

# disable the server signature
ServerSignature Off

<ifModule mod_env.c>
	# set the server timezone
	SetEnv TZ Europe/Rome
</ifModule>
# disable folder listing
Options -Indexes

<ifmodule mod_deflate.c>
   AddOutputFilterByType DEFLATE text/text text/html text/plain text/xml text/css text/javascript application/x-javascript application/javascript application/json application/xml
</ifmodule>

FileETag MTime Size
<ifmodule mod_expires.c>
  <filesmatch "\.(html|htm|js|css|jpeg|jpg|gif|png|ico)$">
       ExpiresActive on
       ExpiresDefault "access plus 1 year"
   </filesmatch>
</ifmodule>
	
<ifModule mod_headers.c>
	Header set Access-Control-Allow-Origin "*"

	# 0
	<FilesMatch "jmvc(\.min)?\.js$">
		Header unset Cache-Control
	</FilesMatch>

	# year
	<FilesMatch "\.(ico|pdf|flv|jpg|jpeg|png|gif|svg|swf|mp3|mp4)$">
		Header set Cache-Control "max-age=31104000, must-revalidate"
		Header unset Last-Modified
	</FilesMatch>
	
	#1 month
	<FilesMatch "\.(js|css|json)$">
		Header append Vary: Accept-Encoding
		Header set Cache-Control "max-age=2592000, must-revalidate"
	</FilesMatch>
	
	#2 hours
	<FilesMatch "\.(html|htm|xml|txt|xsl|xml)$">
		Header set Cache-Control "max-age=7200, must-revalidate"
	</FilesMatch>
</ifModule>    

<IfModule mod_rewrite.c>
</IfModule>
EOF

cat > /etc/apache2/index.tpl  << EOF
<!--
[Malta] tpls/index.tpl.html
-->
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>%DOMAIN% works!</title>
    <script>
        window.onload = function () {
            var http = document.getElementById('http'),
                https = document.getElementById('https'),
                mode = % MODE %;
            switch (mode) {
                case 1:
                    http.style.display = 'block';
                    break;
                case 2:
                    https.style.display = 'block';
                    break;
                case 3:
                    http.style.display = 'block';
                    https.style.display = 'block';
                    break;
            }
        }
    </script>
</head>

<body>
    <ul>
        <li><a id="http" style="display:none" href="http://%DOMAIN%">http://%DOMAIN%</a> works!</li>
        <li><a id="https" style="display:none" href="https://%DOMAIN%">https://%DOMAIN%</a> works!</li>
    </ul>
</body>

</html>
EOF


read -p "Enter the domain name: " domain
read -p "Enter the full folder path: " folder
read -p "Enter the apache user: " user
read -p "Enter the apache group: " group
echo "if afterward You want to create a subdomain eg: xxx.$domain -> $domain/xxx"
echo "1) add 'ServerAlias xxx.$domain' in the $domain.conf"
echo "2) add the following rewrite rule to the created .htaccess"
echo "	RewriteEngine on"
echo "	RewriteCond %{HTTP_HOST} ^xxx.$domain"
echo "	RewriteRule ^(.*)$ http://$domain/xxx/\$1 [P,L]"
echo ""
read -p "Choose
- 1 for http only 
- 2 for https only
- 3 for both : (3 default) " mode

mode=${mode:-3}

http=true

https=true

if [[ "$mode" == 1 ]]; then
	https=false
fi
if [[ "$mode" == 2 ]]; then
	http=false
fi

if [[ "$https" == true ]]; then
	cd /etc/apache2/ssl
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout $domain.key -out $domain.crt
	openssl req -new -key $domain.key -out $domain.csr
	openssl x509 -req -days 365 -in $domain.csr -signkey $domain.key -out $domain.crt
	cp $domain.key $domain.tmp
	openssl rsa -in $domain.tmp -out $domain.key
	rm $domain.tmp
	cd -
fi

# create the folder if does not exists
#
if [[ -d $folder ]]
then
    echo "Directory $folder already exists"
else
	mkdir $folder
	touch $folder/.htaccess
	less /etc/apache2/htaccess.tpl > $folder/.htaccess
	sudo sed -e "s;%DOMAIN%;$domain;g" -e "s;%MODE%;$mode;g"  /etc/apache2/index.tpl > $folder/index.html
	sudo chown -R $user:$group $folder
	echo "Directory $folder created successfully"
fi

# basic permissions
#
find $folder -type f | xargs chmod 644
find $folder -type d | xargs chmod 755


if [[ -f $folder/build.sh ]]; then
	chmod +x $folder/build.sh
fi
if [[ -f $folder/vars.json ]]; then
	chmod +x $folder/vars.json
fi



sslvhostFile=/etc/apache2/sslvhosts/$domain.conf
vhostFile=/etc/apache2/vhosts/$domain.conf


if [[ "$https" == true ]]; then
	echo "Doing https ... "
	# if missing, replace in tpl and write it
	#if [[ ! -f $sslvhostFile ]] ; then
		sudo sed -e "s;%FOLDER%;$folder;g" -e "s;%DOMAIN%;$domain;g" -e "s;%DOMAIN_CRT%;/etc/apache2/ssl/$domain.crt;g" -e "s;%DOMAIN_KEY%;/etc/apache2/ssl/$domain.key;g" /etc/apache2/sslvhosts/conf.tpl > $sslvhostFile
		sudo subl $sslvhostFile
	#fi
	echo "done"
fi

if [[ "$http" == true ]]; then
	echo "Doing http ... "
	#if [[ ! -f $vhostFile ]] ; then
		sed -e "s;%FOLDER%;$folder;g" -e "s;%DOMAIN%;$domain;g" /etc/apache2/vhosts/conf.tpl > $vhostFile
		sudo subl $vhostFile
	#fi
	echo "done"
fi

# in case append to /etc/hosts
#
inhost=$(less /etc/hosts | grep -c "127.0.0.1 www.$domain")

if [ $inhost -lt 1 ]; then
	echo 'adding line to /etc/hosts ... '
	sudo echo "127.0.0.1 www.$domain $domain" >> /etc/hosts
	echo "done"
fi

# configtest & restart
echo "Testing apache config:"
sudo apachectl -t
echo "Apache restarts:"
sudo apachectl restart
sleep 5

# open
# the right ones
# 
echo "...opening $domain"
if [[ "$https" == true ]]; then
	#open https://www.$domain
	/usr/bin/open -a "/Applications/Google Chrome.app"  "https://www.$domain"
fi
if [[ "$http" == true ]]; then
	#open http://www.$domain
	/usr/bin/open -a "/Applications/Google Chrome.app"  "http://www.$domain"
fi

