#!/bin/sh
#
# Author: fedeghe <fedeghe@gmail.com>
# Version : 1.1.25
#

version=1.1.25


echo ""
echo "                  888"     
echo "888 8e  Y8b Y888P 888 ee  "
echo "888 88b  Y8b Y8P  888 88b "
echo "888 888   Y8b Y   888 888 "
echo "888 888    Y8P    888 888 "
echo "                          v $version"
echo ""




# stop if not root
#
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi

# define some vars
#
CURRENTFOLDER=$(pwd)
HTTP=true
HTTPS=true
MODE=1
HTTPD=/etc/apache2/httpd.conf
HASAPACHEINCLUDE=$(less /etc/apache2/httpd.conf | grep -c "Include\s/etc/apache2/vhosts\/\*\.conf")
HASOPENSSL=$(which openssl | grep -c "/")
TYPELABEL="Choose
- 1 for http only 
- 2 for https only
- 3 for both (1 default): "


echo "Checking dependencies"

if [ -f "$HTTPD" ]; then
    echo "- apache found"
else 
    echo "- apache seem to be missing, install it and try again"
    exit 1
fi


if [ $HASOPENSSL -lt 1 ]; then
    echo "- openssl seem to be missing, you will nto be able to create ssl VirtualHost"
fi





# in case do not exists, create those two folders
# which will contain all `VirtualHost` tags
# 
#
mkdir -p /etc/apache2/vhosts
mkdir -p /etc/apache2/sslvhosts


# be sure that the two above containing folders are included in the httpd.conf
# will be used as containers for the incoming VirtualHost directives file containers that nvh will create 
# now and in all following viratul host

if [ $HASAPACHEINCLUDE -lt 1 ]; then
    echo 'Adding Include for vhosts and sslvhosts to /etc/apache2/httpd.conf ... '
    sudo echo "Include /etc/apache2/vhosts/*.conf" >> /etc/apache2/httpd.conf
    sudo echo "Include /etc/apache2/sslvhosts/*.conf" >> /etc/apache2/httpd.conf
    echo "done"
fi


# tempaltes definition
#
# vhost VirtualHost directive
cat > /etc/apache2/vhosts/conf.tpl << EOF
<VirtualHost *:80>
    # ServerAdmin your_email@if_needed.what
    DocumentRoot "%FOLDER%"
    ServerName %DOMAIN%
    ServerAlias www.%DOMAIN%
    Header set Access-Control-Allow-Origin "*"
    ErrorLog "/private/var/log/apache2/%DOMAIN%-error_log"
    CustomLog "/private/var/log/apache2/%DOMAIN%-access_log" common
    <Directory "%FOLDER%">
        Options Indexes FollowSymLinks
        AllowOverride All
        Require all granted
    </Directory>
</VirtualHost>
EOF
# sslvhost VirtualHost directive
cat > /etc/apache2/sslvhosts/conf.tpl << EOF
<VirtualHost *:443>
    # ServerAdmin your_email@if_needed.what
    DocumentRoot "%FOLDER%"
    ServerName %DOMAIN%
    ServerAlias www.%DOMAIN%
    Header set Access-Control-Allow-Origin "*"
    ErrorLog "/private/var/log/apache2/%DOMAIN%-error_log"
    CustomLog "/private/var/log/apache2/%DOMAIN%-access_log" common
    <Directory "%FOLDER%">
        AllowOverride All
        Require all granted
    </Directory>
    SSLEngine on
    SSLCertificateFile "%DOMAIN_CRT%"
    SSLCertificateKeyFile "%DOMAIN_KEY%"
</VirtualHost>
EOF
# basic default htaccess file in the virtual host root folder
# (created only if the forlder does not exists yet)
cat > /etc/apache2/htaccess.tpl << EOF
# pass the default character set
AddDefaultCharset utf-8

# disable the server signature
ServerSignature Off

<ifModule mod_env.c>
	# set the server timezone
	SetEnv TZ Europe/Rome
</ifModule>
# disable folder listing
Options -Indexes

<ifmodule mod_deflate.c>
   AddOutputFilterByType DEFLATE text/text text/html text/plain text/xml text/css text/javascript application/x-javascript application/javascript application/json application/xml
</ifmodule>

FileETag MTime Size
<ifmodule mod_expires.c>
  <filesmatch "\.(html|htm|js|css|jpeg|jpg|gif|png|ico)$">
       ExpiresActive on
       ExpiresDefault "access plus 1 year"
   </filesmatch>
</ifmodule>
	
<ifModule mod_headers.c>
	Header set Access-Control-Allow-Origin "*"

	# 0
	<FilesMatch "jmvc(\.min)?\.js$">
		Header unset Cache-Control
	</FilesMatch>

	# year
	<FilesMatch "\.(ico|pdf|flv|jpg|jpeg|png|gif|svg|swf|mp3|mp4)$">
		Header set Cache-Control "max-age=31104000, must-revalidate"
		Header unset Last-Modified
	</FilesMatch>
	
	#1 month
	<FilesMatch "\.(js|css|json)$">
		Header append Vary: Accept-Encoding
		Header set Cache-Control "max-age=2592000, must-revalidate"
	</FilesMatch>
	
	#2 hours
	<FilesMatch "\.(html|htm|xml|txt|xsl|xml)$">
		Header set Cache-Control "max-age=7200, must-revalidate"
	</FilesMatch>
</ifModule>    

<IfModule mod_rewrite.c>
</IfModule>
EOF
# basic default index.html file in the virtual host root folder
# (created only if the forlder does not exists yet)
cat > /etc/apache2/index.tpl  << EOF
<!--
[Malta] tpls/index.tpl.html
-->
<!DOCTYPE html>
<html>

<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>%DOMAIN% works!</title>
    <style>
        * {
            font-family: Verdana, sans-serif;
            font-size: 30px
        }
    </style>
    <script>
        window.onload = function () {
            var http = document.getElementById('http'),
                https = document.getElementById('https'),
                mode = %MODE%;
            switch (mode) {
                case 1:
                    http.style.display = 'block';
                    break;
                case 2:
                    https.style.display = 'block';
                    break;
                case 3:
                    http.style.display = 'block';
                    https.style.display = 'block';
                    break;
            }
        }
    </script>
</head>

<body>
    <ul>
        <li id="http" style="display:none"><a href="http://%DOMAIN%">http://%DOMAIN%</a> works!</li>
        <li id="https" style="display:none"><a href="https://%DOMAIN%">https://%DOMAIN%</a> works!</li>
    </ul>
</body>

</html>
EOF
# end of templates


##
# Ask the user some informations

if [ $HASOPENSSL -gt 0 ]; then
    read -p "$TYPELABEL" mode
    MODE=${mode:-1}
fi

# enter the name of the desired virtual host domain
read -p "Enter the domain name: " DOMAIN

# enter the full path to the rootFolder that contains/will contain 
# the virtual host files (e.g. /Users/yourname/htdocs/mywebsite)
read -p "Enter the full folder path ($CURRENTFOLDER): " folderinput
FOLDER=${folderinput:-$CURRENTFOLDER}


if [[ "$MODE" == 1 ]]; then
	HTTPS=false
fi
if [[ "$MODE" == 2 ]]; then
	HTTP=false
fi

if [[ -d $FOLDER ]]; then
    echo "Directory $FOLDER already exists"

    # basic permissions on al file an folders under the rootFolder
    find $FOLDER -type f | xargs chmod 644
    find $FOLDER -type d | xargs chmod 755

else
    # if the rootFolder does not exists, I need to know the `user` and `group` 
    # so to be able to set the ownership of the folder and all files within

    read -p "Enter the apache user: " USER
    read -p "Enter the apache group: " GROUP
    echo "Creating rootFolder directory '$FOLDER' and its content"
    mkdir $FOLDER

    echo "- adding basic .htaccess file"
	touch $FOLDER/.htaccess
    less /etc/apache2/htaccess.tpl > $FOLDER/.htaccess

    echo "- adding remove.sh file"
    echo "if [[ $EUID -ne 0 ]]; then" >> $FOLDER/remove.sh
    echo "   echo \"This script must be run as root\" " >> $FOLDER/remove.sh
    echo "   exit 1" >> $FOLDER/remove.sh
    echo "fi" >> $FOLDER/remove.sh
    echo "read -p \"This will also delete permanently the following folder $FOLDER (CTRL+C to quit, Enter to proceed)  \" x" >> $FOLDER/remove.sh
    echo "rm /etc/apache2/vhosts/$DOMAIN.*" >> $FOLDER/remove.sh
    if [[ "$HTTPS" == true ]]; then
        echo "rm /etc/apache2/ssl/$DOMAIN.*" >> $FOLDER/remove.sh
        echo "rm /etc/apache2/sslvhosts/$DOMAIN.*" >> $FOLDER/remove.sh
    fi

    echo "rm -rf $FOLDER" >> $FOLDER/remove.sh
    sudo chown $USER:$GROUP $FOLDER/remove.sh
    sudo chmod +x $FOLDER/remove.sh
    
	echo "- creating basic index.html"
	sudo sed -e "s;%DOMAIN%;$DOMAIN;g" -e "s;%MODE%;$MODE;g"  /etc/apache2/index.tpl > $FOLDER/index.html
	sudo chown -R $USER:$GROUP $FOLDER
	
    echo "directory $FOLDER and content created successfully"
fi

echo "if afterward You want to create a subdomain eg: xxx.$DOMAIN -> $DOMAIN/xxx"
echo "1) add 'ServerAlias xxx.$DOMAIN' in the $DOMAIN.conf"
echo "2) add the following rewrite rule to the created .htaccess"
echo "	RewriteEngine on"
echo "	RewriteCond %{HTTP_HOST} ^xxx.$DOMAIN"
echo "	RewriteRule ^(.*)$ http://$DOMAIN/xxx/\$1 [P,L]"
echo ""

## ssl  ?
if [[ "$HTTPS" == true ]]; then
	cd /etc/apache2/ssl
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout $DOMAIN.key -out $DOMAIN.crt
	openssl req -new -key $DOMAIN.key -out $DOMAIN.csr
	openssl x509 -req -days 365 -in $DOMAIN.csr -signkey $DOMAIN.key -out $DOMAIN.crt
	cp $DOMAIN.key $DOMAIN.tmp
	openssl rsa -in $DOMAIN.tmp -out $DOMAIN.key
	rm $DOMAIN.tmp
	cd -
fi

sslvhostFile=/etc/apache2/sslvhosts/$DOMAIN.conf
vhostFile=/etc/apache2/vhosts/$DOMAIN.conf

if [[ "$HTTPS" == true ]]; then
	echo "Creating https VirtualHost file ... "
	sudo sed -e "s;%FOLDER%;$FOLDER;g" -e "s;%DOMAIN%;$DOMAIN;g" -e "s;%DOMAIN_CRT%;/etc/apache2/ssl/$DOMAIN.crt;g" -e "s;%DOMAIN_KEY%;/etc/apache2/ssl/$DOMAIN.key;g" /etc/apache2/sslvhosts/conf.tpl > $sslvhostFile
	echo "done"
fi

if [[ "$HTTP" == true ]]; then
	echo "Creating http VirtualHost file... "
	sed -e "s;%FOLDER%;$FOLDER;g" -e "s;%DOMAIN%;$DOMAIN;g" /etc/apache2/vhosts/conf.tpl > $vhostFile
	echo "done"
fi

# in case the needed entry is not found on /etc/hosts 
#
inhost=$(less /etc/hosts | grep -c "127.0.0.1 www.$DOMAIN")
if [ $inhost -lt 1 ]; then
	echo 'adding line to /etc/hosts ... '
	sudo echo "127.0.0.1 www.$DOMAIN $DOMAIN" >> /etc/hosts
	echo "done"
fi

# configtest & restart
#
echo "Testing apache config:"
sudo apachectl -t
echo "Apache restarts:"
sudo apachectl restart
sleep 5

# open
# 
echo "...opening $DOMAIN"
if [[ "$HTTPS" == true ]]; then
	/usr/bin/open -a "/Applications/Google Chrome.app"  "https://www.$DOMAIN"
fi
if [[ "$HTTP" == true ]]; then
	/usr/bin/open -a "/Applications/Google Chrome.app"  "http://www.$DOMAIN"
fi
